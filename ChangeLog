2007-03-20  Rafael Ubal Tena <raurte@gap.upv.es>

	* libopt/stats.c: New functions 'stat_reg_dist' and 'stat_add_sample'.
	* libopt/stats.h: Stat function headers modified.

2007-05-01  Rafael Ubal Tena <raurte@gap.upv.es>

	* kernel/syscall.c: Fixed bug in system call 'llseek'. Many systems
		calls have been added or corrected to correctly run SPEC2000
		benchmarks, checking their output with the 'ref' data set.

2007-06-11  Rafael Ubal Tena <raurte@gap.upv.es>

	* cache.c: Fixed bug for level 2 cache configuration.
	* libopt/options.c: Fixed bug when reading options from command line
		of type "long long unsigned int". The use of 'atoi' has been
		replaced with 'sscanf'.

2007-06-12  Rafael Ubal Tena <raurte@gap.upv.es>
	* mt.h, mt.c, recover.c: added '-mt_recover_penalty', enabling the
		insertion of fetch stalls when the pipeline is recovered from
		a mispeculation.
	* kernel/syscall.c: system call 'ioctl': added support for
		request='TCGETA' (0x5401)
	* fu.c: options '-fu:XXX' to change functional units configuration
		from command line parameters.

2007-06-22  Rafael Ubal Tena <raurte@gap.upv.es>

	* fetch.c: condition modified to stop fetching instructions when
		the next instruction to fetch is not contained in the current
		instruction cache block.

2007-11-14  Rafael Ubal Tena <raurte@gap.upv.es>

	* writeback.c: a missing call to 'ptrace_newstage' is added in the
		writeback stage.
	* simmt.c: cycle counters are advanced before pipeline stages.
	* mt.c: message listing mt_decode_kind options was wrong.

2007-11-22  Rafael Ubal Tena <raurte@gap.upv.es>
	
	* phregs.c: physical register file access to decode an instruction,
		i.e., to find a free physical register sweeps all register
		file, which is not scalable. A list of free physical registers
		is added, updated incrementally. Now, a new register is
		allocated with constant cost.

2007-12-17  Rafael Ubal Tena <raurte@gap.upv.es>

	* all: Start using the GNU Build System. Executables renamed to
		m2s, m2s-fast and m2s-ptrace.

2007-12-27
	* m2s-fast.c: Debugging code removed.

2008-02-11
	* writeback.c: There was a call to ptrace_new_stage, using an 'uinst'
		as an argument which had been freed before.
	
2008-02-20
	* m2s.c: New option: -mt_max_time

2008-03-03
	* kernel/regs.c: Error in regs_reg_name when printing floating point
		registers.

2008-03-13
	* libopt/options.c: Comments are now allowed in the configuration file.

2008-04-09
	* mt.h: renamed to processor.h
	* all files: structure mt_t renamed to p_t. There will be a global
		pointer 'p' which need not be passed as parameter for all
		functions (in contrast to the previous 'mt' variable).
	* all kernel files: kernel variable is no longer passed as argument.
		Instead, a global variable 'ke' is implemented.

2008-04-28
	* rob.c: create a file for managing the ROB.
	* processor.h: change processor structure to support this.
	* writeback.c/retire.c: call to bpred_update is performed at commit.
	* libmhandle/mhandle.h: new function to obtain used memory.
	* m2s.c: fixed functions and signal handlers.

2008-05-10
	* libcachesystem: all cache system files have been updated, involving
		cache, coherence protocol and interconnects.
	
2008-07-25
	* libm2skernel: Multi2Sim is now based on the x86 architecture. The
		kernel is changed to run x86 executables, and some files
		modelling the processor pipeline are changed to implement the
		translation of x86 instructions to RISC uops.

2008-09-08
	* mm.c: module removed. Function mm_rtranslate is not needed. The memory
		map module is moved to libcachesystem.
	* libcachesystem/mm.c: implementation of block status in the memory
		map structures to support directory-based coherence.

2008-10-01
	* syscall.c: fixed bug in syscall 'close'. It used 'fd' instead of 'efd'.
	* memory.c: support for memory protection.
	* memory.c: function 'mem_dump', to dump a region of memory into a file
	* syscall.c: implementation of syscall 'mprotect'. It was ignored before.

2008-10-13
	* syscall.c: bug in 'mmap2': memory is reserved in down-growing addresses.
		System call 'mremap' has been updated as well.
	* machine.c: bug in instruction call_rm32 when rm32 includes register esp.
	* loader.c: many changes. The interface of the loader has slightly
		changed, and there is now support to load program specific
		environment variables from a context file.

2008-10-15
	* libstruct/cachesystem.c: bug in function 'cache_system_done'. Some
		elements of type 'ccache_t' were freed twice.
	* queues.c: bug in function 'iq_done', 'lq_done', 'sq_done'. The flag
		'in_iq', 'in_lq', and 'in_sq' was not cleared when uops were
		extracted, so they where not correctly freed.

2008-10-20
	* syscall.c: function 'syscall_debug_string' added.
	* isa.c: bug fixed in 'isa_push_fpu', 'isa_store_fpu', 'isa_pop_fpu',
		and 'isa_load_fpu' when debugging extended values.
	* context.c: changed order of 'futex_wake' and 'clear_child_tid'
		in function 'ctx_finish'.
	* syscall.c: syscall 'access'.
	* libdisasm/machine.dat, uop2.dat, libm2skernel/machine-str.c:
		instructions 'movsw', 'jecxz', 'jcxz'.

2008-10-22
	* loader.c: support for dynamic linking. Applications need not be
		statically complied anymore to run under multi2sim. When
		a program header of type 'PT_INTERP' is found in the ELF
		file, the program interpreter (usually /lib/ld-linux.so.2)
		is loaded into memory.
	* INSTR: 'fcomi', 'fcomip', 'fucomi', 'fucomip'
	* INSTR: 'bt_rm32_r32', 'bt_rm32_imm8', 'cpuid'
	* INSTR: all of 'fcmovCC'

2008-10-23
	* INSTR: 'fcom_m32', 'fcom_m64', 'fcom_sti', 'fcomp_m32',
		'fcomp_m64', 'fcomp_sti', 'fcompp'
	* INSTR: 'ftst'
	* INSTR: 'repz_ret'
	* syscall.c: system call 'futex' with operation 'FUTEX_WAKE_OP'.
	* syscall.c: system call 'madvise'
	* syscall.c: system call 'fchmod'
	* INSTR: bug in 'fldcw' and 'fstcw'/'fnstcw'. The floating point control
		register is updated in the real machine as well. It led to
		wrong rounding methods.
	* INSTR: bug in 'fchs'. We were using assembler instructions 'fldl' and
		'fstpl' instead of 'fldt' and 'fstpt'.

2008-11-02
	* syscall.c: macro RETVAL(X) added. This macro enables to return the
		exact system call error code returned in the 'errno' variable.
		We were always returning -1 on error.

2008-11-03
	* m2s.h: parameters '-iq_kind' and '-lq_kind' added again. We hardcoded
		this before to private structures, but now we add the option only
		for these non-FIFO queues. Store queue and fetch queue remain
		private.
	* queues.c: parameters '-phregs_size', '-lq_size', and '-iq_size' refer
		now to the *per-thread* size, even for shared structures.
	* dispatch.c: bug fixed for switch case when dispatch_kind is timeslice.
		The return value that enables dispatch is 'di_stall_used'.
	* Version 2.0 Released

2008-11-04
	* m2s.h: hardcoded struct processor_t split into processor_core_t and
		processor_thread_t. The number of cores and threads is now
		unlimited.
	* fu.c: interface changed to normalize it as in the rest of modules.
		There is now 'fu_init' and 'fu_done' functions.
	* processor.c, and all files corresponding to stages: the public
		function is not e.g. 'p_fetch()', but 'p_fetch_core()'. Now,
		cores are called from the external loop in 'p_stages', so that
		we can void handling cores with no allocated context.
	* m2skernel.h: variable 'ke->context_max' added, to track the number
		of contexts spawned for a benchmark with m2s-fast.
	* directory.c: file created to implement cache directory protocols.

2008-11-18
	* libcachesystem: implementation of MOESI protocol with directories.
		-Created global 'cache_block_size' parameter, removing
		it from the individual cache configuration. The same cache block
		size is assumed for all caches in the hierarchy.
		-The option to control cache replacement policy is
		removed. Always LRU assumed.
		-Parameters -dperfect, -iperfect added.
	* svn: subversion system for version control used.

2008-12-02
	* fetch.c:
		-Deleted a line of code that was forgotten in some previous
		change.
		-Implementation of a small direct-mapped block lookup table,
		with FETCH_CACHE_NSETS entries (currently 8). If a block is
		found in this table, the memory hierarchy is not accessed.
		This avoid a large amount of il1 accesses and dispatch stalls
		due to empty fetch queue.
	* uop.c: bug fixed. Memory uops created from RMxxx dependencies
		did not set the 'fu_class' and 'flags' fields, so many stores
		and loads where not sent to the lq/sq.

2008-12-04
	* context.c/syscall.c/m2skernel.h: bug fixed for futex wake up. The
		FIFO order established when sleeping in the futex is now
		used for waking up contexts.
	* m2skernel.c: use of 'gettimeofday' instead of 'clock' to retrieve
		time.
	* moesi.c: random retry latency when a block cannot be locked. This
		should enforce forward progress and prevent starvation.
	* processor.c: remove refresh stage. Parameter '-stage_time_stats'
		added to track time spent by each stage.
	* dispatch.c: dispatch stall 'di_stall_ctx' notified when dispatch
		cannot be carried out due to absence of running context. It
		was accounted as 'di_stall_fetchq' before.

2008-12-09
	* network.c: bug fixed when setting a network link busy. It was set
		busy depending on the destination node. Now it is set busy
		depending on the next node of the route to the dest.
		Besides, net_link_busy_xxx functions are added.

2008-12-17
	* cachesystem.c: configurable cache system using an external text
		file, whose format must still be documented. Major change.
	* moesi.c: bug fixed in EVICT_WRITEBACK. Upper lever blocks were
		not invalidated. Event function INVALIDATE created to
		perform WRITE_REQUESTs to upper blocks.

2008-01-12
	* fetch.c: implementation of fetch policies (ICount, PDG, DCRA).
	* processor.c: option "-occupancy_stats" added to measure RF, IQ,
		LQ, SQ and ROB.
	
2009-02-12
	* fetch.c: bug fixed in memory address translations for memory
		access microinstructions. This fix is important, because
		cache accesses were performed in wrong memory locations,
		which strongly affects performance results.
	* writeback.c: bug in stores, they were not inserted back in the
		event queue if the data witness does not indicate
		completion.
	* moesi.c: blocking = 0 in LOAD and STORE events.

2009-02-21
	* mmu.c: bug fixed in mmu_get_page. When a page was located in the
		middle of a bucket chain in the hash table, it was bogusly
		located at the head of the list, causing it to get lost
		and generating huge amounts of used memory.
		This is an important bug, because directory entries of
		main memory blocks were lost with the physical pages, thus
		altering MOESI transactions and affecting performance results.
	* moesi.c: bug fixed in MOESI_FIND_AND_LOCK event. It made some
		asserts fail in very rare cases where a block is accessed
		in a shared cache where it is being currently brought.
		We solve this by locking the whole set.

2009-02-22
	* fu.c: unimportant bug fixed in the 3rd parameter of the calls to
		opt_reg_uint32_list for options fu:fpmult, fu:fpdiv, and
		fu:fpsqrt.
	* elf.c: added file for ELF management, so that the support of the
		problematic bfd library is no longer needed.

2009-02-28
	* moesi.c: bug fixed in MOESI_FIND_AND_LOCK event. The previous
		solution to avoid races in block accesses was incorrect.
		Now, the concept of 'transient tag' is introduced. When
		a block is locked, its temporary tag is stored, so any
		future access will find a hit, and find the block locked
		while unavailable.

2009-03-03
	* commit.c: sanity check that forces running threads to commit at
		least one instruction every 1M cycles. This check was
		performed before as an alarm accounting commits for the
		whole processor.
	* fetch.c: fetch cache removed. Instruction cache accesses are
		only performed if previous fetched block is other than
		the current one.
	* rob.c: removed unused options; '-rob_size' means now the ROB size per
		thread.
	* processor.c: check that kernel is not stuck in p_stages().

2009-03-11
	* Version 2.1 Released

2009-04-07
	* All: SVN new hierarchy with trunk and branches, aimed at being
		accessed by any user who wants to contribute developing.

2009-04-23
	* uop.c, m2s.h, fetch.c, bpred.c: bug fixed. There was a wrong use of
		the uop->inst->size attribute, which was read in an
		obsolete manner after the pointed isa_inst had changed.
		Now it is copied in the uop->size local attribute.

2009-07-21
	* m2s.c: debug information and options changed. There are no more
		huge dumps after a 'fatal' or 'panic' occurs during
		simulation. Instead, this dump is controlled by the
		'-debug:error' parameter.

2009-09-23
	* cachesystem.c: bug fixed that prevented the cache block size
		to be changed in the cache configuration file. New check
		added in the configuration file analysis, which does not
		allow block sizes greater than page sizes.

2009-10-26
	Cache blocks of different sizes allowed for different caches.
	This allows the key BlockSize to be specified in the cache config
	files individually for each cache and main memory. The MOESI
	protocol schemes have also been changed in the documentation
	project.

	* mmu.c: parameter '-page_size' to change the memory page size.
		The constants MMU_PAGE_SIZE, MMU_LOG_PAGE_SIZE, and
		MMU_PAGE_MASK have been converted into variables.

2009-11-03
	Validation Buffer architecture removed. Option '-arch' removed.

2009-11-03
	The register renaming mechanism with 'valid_remapping', 'pending_readers',
	and 'completed' fields is simplified to work on a plain ROB-based
	architecture.

	* phregs.c: new register renaming scheme designed to efficiently
		manage x86 flags ZF, PF, SF, OF, CF, DF. Each physical register
		attaches these flags, instead of making them occupy full
		additional registers.

2009-11-04
	* queues.c, phregs.c: default parameters did not make much sense. They
		have been changed to: RF=80, ROB=64, IQ=40, LQ=20, SQ=20.

2009-11-05
	* bpred.c: branch prediction redesigned and a new implementation made.
		The new design allows for multiple branch prediction. It has
		been documented in the m2s-doc project.

2009-11-06
	* decode.c: new pipeline stage that decouples instruction decode from
		instruction fetch.
	* fetch.c: processor front-end redesigned and reimplemented with
		a detailed documentation in the m2s-doc project.
		Fetch policies made code at fetch too complex. They are
		removed for the next version.

2009-11-23
	Version 2.2 Released

2009-11-24
	* uop.c: 'dep_map' updated. Dependence DDF was not present.
	* libstruct/debug.c: function 'dump_buf' implemented.

2009-12-02
	* libcachesystem/cache.c: new option to configure block replacement
		policy in the cache config file.
	* libmisc/misc.c: function 'map_string_case'
	* stat 'evicts' added to caches

2009-12-03
	* libstruct/config.c: bug fixed in function 'trim'. Tabs were not
		deleted at the beginning and end of strings.
	* libstruct/cachesystem.c: TLB section set as optional in cache
		configuration file.

2009-12-09
	* libm2skernel/elf.c: bug fixed. There was a segmentation fault
		when a non-existing executable file was tried to be
		loaded.

2009-12-17
	* tcache.c, processor.c: stats 'committed', 'squashed', 'accesses',
		'hits', and 'hitratio' for trace cache.
	* tcache.c: Change uop_max for trace_size.
		Function tcache_commit_trace changed to tcache_flush_trace.
		Stat 'tcache.trace_length' added, indicating the average trace
		length (depends on max branches and uops alignment).

2009-12-18
	* libmhandle/mhandle.c: list storing freed pointers removed. This
		caused used memory to grow indefinitely when pointers
		were constantly allocated and deallocated.
	* processor.c, m2s.c: processor stats dumped into debug:error file
		after SIGABRT received.

2009-12-22
	* libmhandle: memory overhead of libmhandle is too high to make it by
		default. DMHANDLE directive is removed in Makefile.am.
	* memory.c: global variable mem_mapped_space.
	* processor.c: stat sim.memory changes meaning.

2009-12-31
	* libstruct/repos.c: implementation improved to provide function
		repos_free_dump to dump objects not freed.

2010-01-04
	* libm2skernel/syscall.c: system call fcntl64 with cmd=3 (F_GETFL)
		implemented.
	* libm2skernel/syscall.c: system call 'utime' implemented.
	* libm2skernel/syscall.c: system call 'chmod' implemented.
	* libm2skernel/syscall.c: system call 'chown' implemented.
	* With these system calls, the Mediabench suite is supported.

2010-01-05
	* libm2skernel/m2skernel.h: global variable 'mem_max_mapped_space',
		representing the maximum allocated physical memory for
		benchmarks.
	* m2s-fast.c: stat names changed. Stat 'sim.memory' and
		'sim.memory_max' added.
	* processor.c: stats 'sim.memory' and 'sim.memory_max' added.

2010-01-06
	* m2s-cache, m2s-bpred, m2s-network: removed.

2010-01-08
	* libcachesystem: stat 'cache.hits' added, to avoid the hitratio
		inaccuracy.
	* queues.c, m2s.h, ...: LQ and SQ queues unified into LSQ. Para-
		meters 'lq_size' and 'sq_size' are unified into
		'lsq_size'.

2010-01-11
	* libdisasm/machine.dat: inst mov_r16_rm16 added.
	* libm2skernel/syscall.c: system call 'rename' implemented.
	* libm2skernel/syscall.c: system call 'setrlimit' with RLIMIT_STACK
		implemented.

2010-01-12
	* libm2skernel/syscall.c: system call 'setrlimit' ignored again.
	* libcachesystem/moesi.c: debug information for access retries.

2010-01-14
	* libm2skernel/uop1.dat, uop2.dat: uops load_esi, load_edi, load_moffs
		deleted. The same with stores. Number of odeps for uops changed
		to 4, and those uops with 5 uops have been changed.

2010-01-15
	* libstruct, libmisc, ptrace: function calls to 'fgets' changed to
		capture the return value and avoid warnings in some gcc versions.

2010-02-06
	* fetch.c: bug fixed. Sequence number of macroinstruction (uop->mop_seq)
		was not correctly assigned.
	* m2s.h: field uop->di_seq added, for dispatch sequence numbers.
	* writeback.c: bug fixes when recovering from mispeculation. The condition
		to call 'p_recover' has been changed.
	* fu.c, m2s.h: functional units - options and operators
	* m2s-pipeline: new tool to analyze pipeline traces

2010-02-16
	* network.c: new model for interconnection network, using a more accurate
		switch model.
	* cachesystem: updated for new interconnect model.

2010-02-22
	* memory.c, m2skernel.h: global memory 'mem_safe_mode'. Default value is
		true. If false, memory is accessed unsafely without providing
		segmentation faults.

2010-02-23
	* loader.c: the original argument list is not artificially modified
		anymore. There was a problem when the program header table was
		loaded for dynamic linking. The AT_ENTRY program header should
		store the entry point for the main program, and not for the
		program interpreter. Bug fixed. Still, dynamic loading does not
		work for other machines.
	* misc.c: function 'map_value_string' improved.
	* syscall.c: system call mmap and mmap2 fixed. The system call mmap takes
		its arguments from memory, instead of registers.
	* elf.c: function 'elf_merge_symtab' implemented, to merge symbol tables
		from an executable and the program interpreter.

2010-02-26
	* syscall.c: bug fixed in system call 'times'. Return value was treated
		as an error code, instead of the number of ticks since system
		start.
	* machine-ctrl.c: bug fixed in inst 'repz ret'. This instruction is
		equivalent to 'ret', regardless of the value of ecx, or flags.
	
2010-03-02
	* cachesystem.c: some bugs have been fixed when analyzing incorrect
		cache configuration files. The error messages have been updated
		to provide more information about the usage. There were some
		situations of wrong configurations that made the simulator crash.

2010-03-16
	* processor.c: -decode_width option added.
	* commit.c: bug fixed. Recover at commit didn't work properly.
	* libm2skernel/syscall.c: system call 'uname': debug information added.

2010-03-30
	Version 2.3 Released

2010-03-30
	* m2skernel.h: context lists updated with 'head' and 'tail' pointers.
	* syscall.c: syscall 'sched_getaffinity'
	* syscall:c: syscall 'fcntl64' with command F_GETFD.
	* configure.in: check for ncurses.

2010-04-16
	* m2s-pipeline.c: KEY_RESIZE event.

2010-04-21
	* loader.c: error message for wrong stdin/stdout.

2010-04-29
	* cachesystem.c: option '-report:cache' to dump detailed stats
		about the cache system. Stats printed on 'stderr' are
		reduced to the hit ratio.
	* processor.c: option '-report:pipeline" to dump detailed stats.
		Stats dumped in stderr are summarized.
	
2010-04-30
	* bpred.c: stats removed from stderr.
	* cachesystem.c: report for caches.

2010-05-01
	* cachesystem.c: parameters '-iports', '-dports' removed. Instead, keys
		ReadPorts and WritePorts are added in the CacheGeometry section
		of the cache configuration file. These fields apply to L1 caches.
	* issue.c: memory uops are not inserted into the eventq directly, thus
		avoiding the continuous insertion in the writeback stage. Instead,
		the cache system inserts them into the eventq when the cache
		access finishes.
	* cachesystem.c: the structure and functions tracking pending cache
		accesses have been redesigned. The most important change is that
		load accesses are not repeated when a load to the same address
		is in-flight. Instead, the new aliasing loads wait to the pending one
		to be completed, and the cache access completion triggers the
		insertion into the corresponding eventq of all uops awaiting
		for the load.
	* tcache.c: statistics dumped into pipeline report file.
	* processor.c: some more global stats.

2010-05-02
	Version 2.3.1 Released

2010-05-02
	* phregs.c: phregs_can_rename: avoid loop to count busy registers.
	* processor.c: detailed report with occupancy stats using -report:pipeline.

2010-05-03
	* cachesystem.c: bug fixed - two new checks for wrong format in cache config files.
		They caused 'asserts' to fail. Now they produce 'fatals'.
	* moesi.c, mmu.c: code fixed to allow for a system with no caches using only
		main memory and no interconnect.

2010-05-04
	* syscall.c: system call 'futex': support for cmd = FUTEX_WAKE_BITSET and
		FUTEX_WAIT_BITSET.

2010-05-05
	* elf.c: error messages updated to be more explicit. The error message obtained
		when trying to execute 64-bit binaries is specific.

2010-06-15
	* processor.c: bug fixed - stats Commit.squashed were showing the same
		results as Commit.mispred.
	* m2s.h: '-phregs_size' and '-phregs_kind' options and variables changed to
		'-rf_size' and 'rf_kind'.
	* processor.c: pipeline statistics for McPAT.
	* cachesystem.c: statistics for McPAT.

2010-06-16
	* phregs.c: function 'phregs_can_rename' substituted by 'phregs_count_deps'.
		This function is called when the uop is created, and stores the
		number of required logical/physical ideps/odeps.
	* cachesystem.c: TLB split into Data-TLB and Inst-TLB for compatibility with
		McPAT.
	* processor.c: call to 'uopq_reg_options()' was missing.

2010-06-16
	Version 2.3.2 Released

2010-06-18
	* elf.c: warnings produced by 'sizeof' removed.

2010-06-23
	* m2skernel: multi-byte nops implemented. Instruction 'cpuid' with eax=2.
		PrefetchXX instructions implemented. (All reported by Multi2Sim user).

2010-07-21
	* m2skernel, sched.c: context scheduler implemented. New fields:
		ke->context_reschedule
		ctx->alloc_when, ctx->dealloc_when
		ctx->alloc_core, ctx->alloc_thread
		ctx->dealloc_signal
		p->ctx_alloc_oldest
		p->ctx_dealloc_signals

2010-07-21
	Version 2.3.3 Released

2010-07-23
	* libdisasm/machine.dat: Bug fixed in instruction bt_rm32_r32. The 4th field
		'SKIP' has been replaced by 'REG'. The Intel manual used as a reference
		had an error in the instruction format specification.
	* m2s-objdump.c: Bug fixed after 'if' statement.


2010-07-26
	* syscall.c: system calls 'sched_getparam' and 'sched_setparam' implemented.
	* syscall.c: system call 'clock_getres' implemented.
	* syscall.c: system calls 'sched_get_priority_min' and 'sched_get_priority_max'
		implemented.
	* Makefile.am: flags '-Werror' removed in all Makefiles.

2010-07-27
	* disasm.c: qualifier 'volatile' added to 'inst' parameter to avoid
		compiler optimizations in 'memset' call.

2010-09-26
	* libm2skernel/memory.c: mem_page_t structure changed to provide a pointer to
		the page data instead of attaching it to the structure. By doing this,
		a benchmark can allocate large amounts of memory without causing
		hyper-paging if the allocated memory pages are not accessed.

2010-09-29
	* syscall.c: system calls 'getdents' and 'getdents64' implemented.
	* lidisasm/machine.dat, libm2skernel/machine.c: instruction 'pause' implemented.

2010-10-02
	* memory.c: flag 'mem_access_modif' added as a state for the memory page.
	* syscall.c: system call 'msync' added, but left blank as if it was ignored.
	* syscall.c, context.c: system call 'exit_group' fixed.
		Function 'ctx_finish_group' implemented.
	* syscall.c: system call 'tgkill' implemented.

2010-10-24
	* rf.c, m2s.h: register renaming mechanism upgraded to support stack-based
		x86 floating-point operations. In the prior scheme, all FP uops were
		dependent on each other. The new mechanism allows parallelism to
		be exploited among FP uops.
	* processor.c: two register files supported, one for integer and other for
		floating-point registers. Statistics are shown separately for both.

2010-10-26
	Version 2.4 Released

2010-10-27
	* processor.c, commit.c: bug fixed when computing structure occupancy stats
		in private structures. The macro updating threads' accumulated
		occupancy was called in commit_thread, which is a function that is
		not executed necessarily every cycle for every thread. Now, the
		structures occupancy is accumulated in function p_update_occupancy_stats.
		Since this can be costly for a high number of cores/threads, command
		line option '-occupancy_stats' has been added, which defaults to
		false.

2010-11-04
	* loader.c: warning removed for dynamic linking.
	* libm2skernel/machine.c: machine instruction 'cpuid' updated to dump in
		edx register a more accurate information about the modeled CPU.
	* libm2skernel/memory.c: function 'mem_page_get_next' and
		'mem_map_dump' added to reconstruct ranges of the current
		memory map.

2010-11-09
	* fs.c: new management of file handlers in structure fdt_t. Pipes are handled
		within.
	* pipe.c: file removed.

2010-11-12
	* m2skernel.c: centralized function to wake up suspended contexts.
	* m2skernel.c: blocking 'poll' system calls handled with an alternative mechanism
		using child threads (ke_process_suspended_thread).
	* m2skernel.c: pipes treated again as regular files. Thanks to the suspending
		mechanism using child threads, pipes don't need special treatment.

2010-11-18
	* fs.c: new file was missing from repository.
	* signal.c: signal handler fixed. In the old handler, only the signal number and
		the return address (pointing at the return code calling syscall 'sigreturn')
		were inserted into the stack. Now, following the Linux kernel implementation,
		a standard signal handler frame is constructed before launching a signal
		handler, and the return code is inserted into a specially allocated memory
		page with execution permission, in order to avoid executable stack.
	* m2skernel.c: synchronous waits among guest threads handled completely with host
		thread 'ke_process_suspended_thread'. Now there is no need for periodical
		checks of 'ke_timer' in the main simulation loop. Variable 'ke->process_suspended_time'
		has been removed.

2010-11-20
	* memory.c, syscall.c, m2skernel.h: support for memory mappings using any type of
		file descriptor. In the previous implementation of mmap, munmap, mprotect,
		a file mapping was emulated with 'seek' and 'read' system calls. Now,
		a real host call to 'mmap' is performed, so that any file descriptor can be
		used for mappings (e.g., a device such as GPU).

2010-12-03
	* issue.c: bug fixed in the order in which LQ, SQ, and IQ were handled. Memory instructions
		are prioritized over arithmetic uops.


2010-12-03
	Version 2.4.1 Released

2010-12-06
	* syscall.c: ioctl system call simplified; first gpu implementation attempt reverted.
		Instead, an additional OpenCL system call is created, used for the implementation
		of the whole OpenCL 1.1 interface.
	* libgpukernel: library added to start the OpenCL implementation project.

2010-12-08
	* m2s-pipeline.c: warnings fixed.
	* disasm.c: warnings fixed.
	* libgpukernel: restructured, files added, OpenCL extended.
	* syscall.c, gpukernel.c: redirection of libOpenCL.so to libm2s-opencl.so

2010-12-12
	* libgpukernel: OpenCL implementation.

2010-12-13
	* syscall.c: system call 'readlink' implemented.

2010-12-16
	* libm2skernel/memory.c: bug fixed. Accesses to nonexistent page cause segmentation
		faults. Page attributes were set to modified before checking if the
		page was found or not.
	* libgpukernel: Evergreen ISA + OpenCL

2010-12-17
	* libgpukernel: functional simulation.
	* syscall.c: syscall 'write': bug fixed. After the las modifications in the handling of
		asynchronous system calls, a bug was introduced in the synchronous write.
		This bug might affect any simple execution.
	* libdisasm/Makefile.am: bug in file list caused distribution to fail compiling.

2010-12-20
	* libgpukernel: local memory, functional simulation.
	* libgpudisasm: LDS formats
	* libgpukernel: assignment of 1D/3D thread IDs and work sizes.
	* libgpumachine: LDS implementation

2010-12-22
	* libgpukernel: control-flow

2010-12-23
	* libgpukernel: more control flow

2010-12-23
	* libgpukernel: restructure. Warps created.

2010-12-26
	* libm2skernel/machine-fp.c: BUG FIXED in machine instructions FCOMI, FCOMIP, FUCOMI,
		FUCOMIP. These instructions exceptionally modify the integer flags. This
		detail was not taken into account, and they were modeled as if they modified
		the floating-point status register.

2010-12-27
	* libgpukernel/opencl-obj.c: improved analysis of ELF kernel binaries based on
		the symbols contained in the main symbol table.

2010-12-31
	* libgpukernel/cal-abi.c: new analysis of the secondary ELF kernel binary based on the
		new information released by AMD.

2011-01-05
	* libgpukernel/cal-abi.c, opencl-obj.c: updated to use the new management of ELF files.
	* libgpukernel/opencl.c: added a 4th parameter to the clGetPlatformIDs both in the
		libm2s-opencl.so library and in the OpenCL system call interpreter to pass the
		library implementation version. This forces the user to always have the latest
		update for the library.

2011-01-12
	* libgpukernel/cal-abi.c: constants for ELF_NOTE_ATI_XXX added as per AMD's notification.
	* Version 2.4.2 Released

2011-01-12
	* libgpukernel/cal-abi.c: debug info for pt_note entries.

2011-01-15
	* libgpukernel/gpumachine.c, libgpudisasm/gpudisasm.dat: new instructions implemented.
		Support provided for MatrixMultiplication kernel, both using global and
		local memory.
	* libgpukernel/gpuisa.c: Initialization of CB[0] as specified by the information provided
		by AMD.

2011-01-20
	* tools/libm2s-opencl: Directory containing the Multi2Sim OpenCL library.
	* tools/m2s-opencl-kc: OpenCL Kernel Compiler. Based on the CAL interface, the tool
		takes an OpenCL kernel as an input and compiles it for any target device supported
		by the OpenCL driver. It requires the AMD SDK installed.

2011-01-29
	* libgpukernel/gpumachine.c: Several instructions implemented. Bug fixed in RECIP_UINT.

2011-01-30
	* tools/barplot, tools/inifile: added.
	* Makefile.am: added files in 'tools' for distribution.

2011-01-31
	* tools/libm2s-opencl: dependency with AMD APP SDK removed. Khronos headers added as
		a subdirectory of the Multi2Sim OpenCL library.

2011-02-03
	* tools/m2s-opencl-kc: Error message for missing APP SDK updated.

2011-02-04
	* Version 3.0 Released

2011-02-23
	* tools/m2s-pipeline: Tool for displaying pipeline debug information moved to the 'tools'
		directory. The dependency with the 'ncurses' library is removed from the
		central Multi2Sim code.
	* tools/Makefile.am: -lncurses flag removed from linking options.

2011-02-23
	* Version 3.0.1 Released

2011-02-03
	* src/libm2skernel/{m2skernel.*, signal.c, context.c}: signal management restructured, and
		new loops added in 'ke_process_events'.
	* src/libm2skernel/syscall.c: system calls 'setitimer', 'getitimer' implemented.
	* src/libm2skernel/syscall.c: system call 'select' implemented (for tv = 0).
	* src/libm2skernel/signal.c: flag 'SA_RESTART' for sigaction restarting system calls.
	* src/libm2skernel/syscall.c: system call 'ioctl' updated for ioctl codes using the
		'struct termios' argument.

2011-02-04
	* src/issue.c: bug fixed in function 'check_if_ready', which caused different performance
		results for experiments using option '-debug:pipeline'.
	* src/commit.c: checking 'ready' property for stores moved here, since this is the point
		when stores are still in the ROB. In issue, they might be already out, and calls
		to 'rf_ready' will provide inconsistent results.

2011-03-22
	* src/libgpukernel: support added for more OpenCL benchmarks.

2011-03-28
	* src/libgpukernel: option '-report:gpu' added to dump GPU report. Statistics gathered
		from kernel execution.


2010-04-02
	* src/libgpukernels: support for kernels, report gpu, and ISA trace updated.

2010-04-04
	* src/m2s.c: detailed simulator command-line options updated to include GPU report.
