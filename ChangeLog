2007-03-20  Rafael Ubal Tena <raurte@gap.upv.es>

	* libopt/stats.c: New functions 'stat_reg_dist' and 'stat_add_sample'.
	* libopt/stats.h: Stat function headers modified.

2007-05-01  Rafael Ubal Tena <raurte@gap.upv.es>

	* kernel/syscall.c: Fixed bug in system call 'llseek'. Many systems
		calls have been added or corrected to correctly run SPEC2000
		benchmarks, checking their output with the 'ref' data set.

2007-06-11  Rafael Ubal Tena <raurte@gap.upv.es>

	* cache.c: Fixed bug for level 2 cache configuration.
	* libopt/options.c: Fixed bug when reading options from command line
		of type "long long unsigned int". The use of 'atoi' has been
		replaced with 'sscanf'.

2007-06-12  Rafael Ubal Tena <raurte@gap.upv.es>
	* mt.h, mt.c, recover.c: added '-mt_recover_penalty', enabling the
		insertion of fetch stalls when the pipeline is recovered from
		a mispeculation.
	* kernel/syscall.c: system call 'ioctl': added support for
		request='TCGETA' (0x5401)
	* fu.c: options '-fu:XXX' to change functional units configuration
		from command line parameters.

2007-06-22  Rafael Ubal Tena <raurte@gap.upv.es>

	* fetch.c: condition modified to stop fetching instructions when
		the next instruction to fetch is not contained in the current
		instruction cache block.

2007-11-14  Rafael Ubal Tena <raurte@gap.upv.es>

	* writeback.c: a missing call to 'ptrace_newstage' is added in the
		writeback stage.
	* simmt.c: cycle counters are advanced before pipeline stages.
	* mt.c: message listing mt_decode_kind options was wrong.

2007-11-22  Rafael Ubal Tena <raurte@gap.upv.es>
	
	* phregs.c: physical register file access to decode an instruction,
		i.e., to find a free physical register sweeps all register
		file, which is not scalable. A list of free physical registers
		is added, updated incrementally. Now, a new register is
		allocated with constant cost.

2007-12-17  Rafael Ubal Tena <raurte@gap.upv.es>

	* all: Start using the GNU Build System. Executables renamed to
		m2s, m2s-fast and m2s-ptrace.

2007-12-27
	* m2s-fast.c: Debugging code removed.

2008-02-11
	* writeback.c: There was a call to ptrace_new_stage, using an 'uinst'
		as an argument which had been freed before.
	
2008-02-20
	* m2s.c: New option: -mt_max_time

2008-03-03
	* kernel/regs.c: Error in regs_reg_name when printing floating point
		registers.

2008-03-13
	* libopt/options.c: Comments are now allowed in the configuration file.

2008-04-09
	* mt.h: renamed to processor.h
	* all files: structure mt_t renamed to p_t. There will be a global
		pointer 'p' which need not be passed as parameter for all
		functions (in contrast to the previous 'mt' variable).
	* all kernel files: kernel variable is no longer passed as argument.
		Instead, a global variable 'ke' is implemented.

2008-04-28
	* rob.c: create a file for managing the ROB.
	* processor.h: change processor structure to support this.
	* writeback.c/retire.c: call to bpred_update is performed at commit.
	* libmhandle/mhandle.h: new function to obtain used memory.
	* m2s.c: fixed functions and signal handlers.

2008-05-10
	* libcachesystem: all cache system files have been updated, involving
		cache, coherence protocol and interconnects.
	
2008-07-25
	* libm2skernel: Multi2Sim is now based on the x86 architecture. The
		kernel is changed to run x86 executables, and some files
		modelling the processor pipeline are changed to implement the
		translation of x86 instructions to RISC uops.

2008-09-08
	* mm.c: module removed. Function mm_rtranslate is not needed. The memory
		map module is moved to libcachesystem.
	* libcachesystem/mm.c: implementation of block status in the memory
		map structures to support directory-based coherence.

2008-10-01
	* syscall.c: fixed bug in syscall 'close'. It used 'fd' instead of 'efd'.
	* memory.c: support for memory protection.
	* memory.c: function 'mem_dump', to dump a region of memory into a file
	* syscall.c: implementation of syscall 'mprotect'. It was ignored before.

2008-10-13
	* syscall.c: bug in 'mmap2': memory is reserved in down-growing addresses.
		System call 'mremap' has been updated as well.
	* machine.c: bug in instruction call_rm32 when rm32 includes register esp.
	* loader.c: many changes. The interface of the loader has slightly
		changed, and there is now support to load program specific
		environment variables from a context file.

2008-10-15
	* libstruct/cachesystem.c: bug in function 'cache_system_done'. Some
		elements of type 'ccache_t' were freed twice.
	* queues.c: bug in function 'iq_done', 'lq_done', 'sq_done'. The flag
		'in_iq', 'in_lq', and 'in_sq' was not cleared when uops were
		extracted, so they where not correctly freed.

2008-10-20
	* syscall.c: function 'syscall_debug_string' added.
	* isa.c: bug fixed in 'isa_push_fpu', 'isa_store_fpu', 'isa_pop_fpu',
		and 'isa_load_fpu' when debugging extended values.
	* context.c: changed order of 'futex_wake' and 'clear_child_tid'
		in function 'ctx_finish'.
	* syscall.c: syscall 'access'.
	* libdisasm/machine.dat, uop2.dat, libm2skernel/machine-str.c:
		instructions 'movsw', 'jecxz', 'jcxz'.

2008-10-22
	* loader.c: support for dynamic linking. Applications need not be
		statically complied anymore to run under multi2sim. When
		a program header of type 'PT_INTERP' is found in the ELF
		file, the program interpreter (usually /lib/ld-linux.so.2)
		is loaded into memory.
	* INSTR: 'fcomi', 'fcomip', 'fucomi', 'fucomip'
	* INSTR: 'bt_rm32_r32', 'bt_rm32_imm8', 'cpuid'
	* INSTR: all of 'fcmovCC'

2008-10-23
	* INSTR: 'fcom_m32', 'fcom_m64', 'fcom_sti', 'fcomp_m32',
		'fcomp_m64', 'fcomp_sti', 'fcompp'
	* INSTR: 'ftst'
	* INSTR: 'repz_ret'
	* syscall.c: system call 'futex' with operation 'FUTEX_WAKE_OP'.
	* syscall.c: system call 'madvise'
	* syscall.c: system call 'fchmod'
	* INSTR: bug in 'fldcw' and 'fstcw'/'fnstcw'. The floating point control
		register is updated in the real machine as well. It led to
		wrong rounding methods.
	* INSTR: bug in 'fchs'. We were using assembler instructions 'fldl' and
		'fstpl' instead of 'fldt' and 'fstpt'.

2008-11-02
	* syscall.c: macro RETVAL(X) added. This macro enables to return the
		exact system call error code returned in the 'errno' variable.
		We were always returning -1 on error.

2008-11-03
	* m2s.h: parameters '-iq_kind' and '-lq_kind' added again. We hardcoded
		this before to private structures, but now we add the option only
		for these non-FIFO queues. Store queue and fetch queue remain
		private.
	* queues.c: parameters '-phregs_size', '-lq_size', and '-iq_size' refer
		now to the *per-thread* size, even for shared structures.
	* dispatch.c: bug fixed for switch case when dispatch_kind is timeslice.
		The return value that enables dispatch is 'di_stall_used'.
	* Version 2.0 Released

2008-11-04
	* m2s.h: hardcoded struct processor_t split into processor_core_t and
		processor_thread_t. The number of cores and threads is now
		unlimited.
	* fu.c: interface changed to normalize it as in the rest of modules.
		There is now 'fu_init' and 'fu_done' functions.
	* processor.c, and all files corresponding to stages: the public
		function is not e.g. 'p_fetch()', but 'p_fetch_core()'. Now,
		cores are called from the external loop in 'p_stages', so that
		we can void handling cores with no allocated context.
	* m2skernel.h: variable 'ke->context_max' added, to track the number
		of contexts spawned for a benchmark with m2s-fast.
	* directory.c: file created to implement cache directory protocols.

2008-11-18
	* libcachesystem: implementation of MOESI protocol with directories.
		-Created global 'cache_block_size' parameter, removing
		it from the individual cache configuration. The same cache block
		size is assumed for all caches in the hierarchy.
		-The option to control cache replacement policy is
		removed. Always LRU assumed.
		-Parameters -dperfect, -iperfect added.
	* svn: subversion system for version control used.

2008-12-02
	* fetch.c:
		-Deleted a line of code that was forgotten in some previous
		change.
		-Implementation of a small direct-mapped block lookup table,
		with FETCH_CACHE_NSETS entries (currently 8). If a block is
		found in this table, the memory hierarchy is not accessed.
		This avoid a large amount of il1 accesses and dispatch stalls
		due to empty fetch queue.
	* uop.c: bug fixed. Memory uops created from RMxxx dependencies
		did not set the 'fu_class' and 'flags' fields, so many stores
		and loads where not sent to the lq/sq.

2008-12-04
	* context.c/syscall.c/m2skernel.h: bug fixed for futex wake up. The
		FIFO order established when sleeping in the futex is now
		used for waking up contexts.
	* m2skernel.c: use of 'gettimeofday' instead of 'clock' to retrieve
		time.
	* moesi.c: random retry latency when a block cannot be locked. This
		should enforce forward progress and prevent starvation.
	* processor.c: remove refresh stage. Parameter '-stage_time_stats'
		added to track time spent by each stage.
	* dispatch.c: dispatch stall 'di_stall_ctx' notified when dispatch
		cannot be carried out due to absence of running context. It
		was accounted as 'di_stall_fetchq' before.

2008-12-09
	* network.c: bug fixed when setting a network link busy. It was set
		busy depending on the destination node. Now it is set busy
		depending on the next node of the route to the dest.
		Besides, net_link_busy_xxx functions are added.

2008-12-17
	* cachesystem.c: configurable cache system using an external text
		file, whose format must still be documented. Major change.
	* moesi.c: bug fixed in EVICT_WRITEBACK. Upper lever blocks were
		not invalidated. Event function INVALIDATE created to
		perform WRITE_REQUESTs to upper blocks.

2008-01-12
	* fetch.c: implementation of fetch policies (ICount, PDG, DCRA).
	* processor.c: option "-occupancy_stats" added to measure RF, IQ,
		LQ, SQ and ROB.
	
2009-02-12
	* fetch.c: bug fixed in memory address translations for memory
		access microinstructions. This fix is important, because
		cache accesses were performed in wrong memory locations,
		which strongly affects performance results.
	* writeback.c: bug in stores, they were not inserted back in the
		event queue if the data witness does not indicate
		completion.
	* moesi.c: blocking = 0 in LOAD and STORE events.

2009-02-21
	* mmu.c: bug fixed in mmu_get_page. When a page was located in the
		middle of a bucket chain in the hash table, it was bogusly
		located at the head of the list, causing it to get lost
		and generating huge amounts of used memory.
		This is an important bug, because directory entries of
		main memory blocks were lost with the physical pages, thus
		altering MOESI transactions and affecting performance results.
	* moesi.c: bug fixed in MOESI_FIND_AND_LOCK event. It made some
		asserts fail in very rare cases where a block is accessed
		in a shared cache where it is being currently brought.
		We solve this by locking the whole set.

2009-02-22
	* fu.c: unimportant bug fixed in the 3rd parameter of the calls to
		opt_reg_uint32_list for options fu:fpmult, fu:fpdiv, and
		fu:fpsqrt.
	* elf.c: added file for ELF management, so that the support of the
		problematic bfd library is no longer needed.

2009-02-28
	* moesi.c: bug fixed in MOESI_FIND_AND_LOCK event. The previous
		solution to avoid races in block accesses was incorrect.
		Now, the concept of 'transient tag' is introduced. When
		a block is locked, its temporary tag is stored, so any
		future access will find a hit, and find the block locked
		while unavailable.

2009-03-03
	* commit.c: sanity check that forces running threads to commit at
		least one instruction every 1M cycles. This check was
		performed before as an alarm accounting commits for the
		whole processor.
	* fetch.c: fetch cache removed. Instruction cache accesses are
		only performed if previous fetched block is other than
		the current one.
	* rob.c: removed unused options; '-rob_size' means now the ROB size per
		thread.
	* processor.c: check that kernel is not stuck in p_stages().

2009-03-11
	* Version 2.1 Released

2009-04-07
	* All: SVN new hierarchy with trunk and branches, aimed at being
		accessed by any user who wants to contribute developing.

2009-04-23
	* uop.c, m2s.h, fetch.c, bpred.c: bug fixed. There was a wrong use of
		the uop->inst->size attribute, which was read in an
		obsolete manner after the pointed isa_inst had changed.
		Now it is copied in the uop->size local attribute.

2009-07-21
	* m2s.c: debug information and options changed. There are no more
		huge dumps after a 'fatal' or 'panic' occurs during
		simulation. Instead, this dump is controlled by the
		'-debug:error' parameter.

2009-09-23
	* cachesystem.c: bug fixed that prevented the cache block size
		to be changed in the cache configuration file. New check
		added in the configuration file analysis, which does not
		allow block sizes greater than page sizes.

2009-10-26
	Cache blocks of different sizes allowed for different caches.
	This allows the key BlockSize to be specified in the cache config
	files individually for each cache and main memory. The MOESI
	protocol schemes have also been changed in the documentation
	project.

	* mmu.c: parameter '-page_size' to change the memory page size.
		The constants MMU_PAGE_SIZE, MMU_LOG_PAGE_SIZE, and
		MMU_PAGE_MASK have been converted into variables.

2009-11-03
	Validation Buffer architecture removed. Option '-arch' removed.

2009-11-03
	The register renaming mechanism with 'valid_remapping', 'pending_readers',
	and 'completed' fields is simplified to work on a plain ROB-based
	architecture.

	* phregs.c: new register renaming scheme designed to efficiently
		manage x86 flags ZF, PF, SF, OF, CF, DF. Each physical register
		attaches these flags, instead of making them occupy full
		additional registers.

2009-11-04
	* queues.c, phregs.c: default parameters did not make much sense. They
		have been changed to: RF=80, ROB=64, IQ=40, LQ=20, SQ=20.

2009-11-05
	* bpred.c: branch prediction redesigned and a new implementation made.
		The new design allows for multiple branch prediction. It has
		been documented in the m2s-doc project.

2009-11-06
	* decode.c: new pipeline stage that decouples instruction decode from
		instruction fetch.
	* fetch.c: processor front-end redesigned and reimplemented with
		a detailed documentation in the m2s-doc project.
		Fetch policies made code at fetch too complex. They are
		removed for the next version.

2009-11-23
	Version 2.2 Released

2009-11-24
	* uop.c: 'dep_map' updated. Dependence DDF was not present.
	* libstruct/debug.c: function 'dump_buf' implemented.

2009-12-02
	* libcachesystem/cache.c: new option to configure block replacement
		policy in the cache config file.
	* libmisc/misc.c: function 'map_string_case'
	* stat 'evicts' added to caches

2009-12-03
	* libstruct/config.c: bug fixed in function 'trim'. Tabs were not
		deleted at the beginning and end of strings.
	* libstruct/cachesystem.c: TLB section set as optional in cache
		configuration file.

2009-12-09
	* libm2skernel/elf.c: bug fixed. There was a segmentation fault
		when a non-existing executable file was tried to be
		loaded.

2009-12-17
	* tcache.c, processor.c: stats 'committed', 'squashed', 'accesses',
		'hits', and 'hitratio' for trace cache.
	* tcache.c: Change uop_max for trace_size.
		Function tcache_commit_trace changed to tcache_flush_trace.
		Stat 'tcache.trace_length' added, indicating the average trace
		length (depends on max branches and uops alignment).
