version 0:99:$full:$small;

function &m2s_print_u32()(arg_u32 %integer)
{
};

function &m2s_print_string()(arg_u64 %str_ptr)
{
};

function &m2s_string_to_u32(arg_u32 %integer)(arg_u64 %string)
{
};

function &fib(arg_s32 %r)(arg_s32 %n)
{
	private_s32 %p;
	ld_arg_s32	$s1, [%n];
	cmp_lt_b1_s32	$c1, $s1, 3;
	cbr_b1	$c1, @return;
	{
		arg_s32 %nm2;
		arg_s32 %res;
		sub_s32	$s2, $s1, 2;
		st_arg_s32	$s2, [%nm2];
		call	&fib (%res) (%nm2);
		ld_arg_s32	$s3, [%res];
	}
	st_private_s32	$s3, [%p];
	{
		arg_s32 %nm2;
		arg_s32 %res;
		sub_s32	$s2, $s1, 1;
		st_arg_s32	$s2, [%nm2];
		call	&fib (%res) (%nm2);
		ld_arg_u32	$s3, [%res];
	}
	ld_private_u32	$s4, [%p];
	add_u32	$s2, $s4, $s3;
	st_arg_s32	$s2, [%r];
	ret;

@return:
	st_arg_s32	1, [%r];
	ret;
};

kernel &main(
	kernarg_u32 %argc,
	kernarg_u64 %argv)
{
	ld_kernarg_u32	$s0, [%argc];
	cmp_ne_b1_u32	$c0, $s0, 2;
	cbr_b1	$c0, @format_error;
	ld_kernarg_u64	$d0, [%argv];
	cvt_u32_u64	$s0, $d0;
	ld_u64	$d0, [$s0+8];
	cvt_u32_u64	$s0, $d0;
	// Call m2s function to convert the integer string 
	{
		arg_u64 %string;
		arg_u32 %integer;
		st_arg_u64	$d0, [%string];
		call	&m2s_string_to_u32 (%integer) (%string);
		ld_arg_u32	$s0, [%integer];
	}
	{
		arg_s32 %n;
		arg_s32 %r;
		st_arg_s32	$s0, [%n];
		call	&fib (%r) (%n);
		ld_arg_s32	$s0, [%r];
	}
	{
		arg_u32 %result;
		st_arg_u32	$s0, [%result];
		call	&m2s_print_u32 () (%result);
	}

@return:
	ret;

@format_error:
	ret;
};
