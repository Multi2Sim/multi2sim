/*
 * DEFINST format
 *      name: Instruction name
 *      fmt_str: String representing the format for dissasembly
 *      opcode: Instruction opcode
 */

/* Single-Precision Floating Point category:
 * FMNMX, FSET, FSETP, FFMA, FCMP, FCCO, FSWZ, FADD, FMUL, RRO, IPA, MUFU
 */

DEFINST(FMNMX, 
	"%pred FMNMX %dst, %nasrc1, %src2, %R", 
	0x008)

DEFINST(FSET, 
	"%pred FSET", 
	0x010)

DEFINST(FSETP, 
	"%pred FSETP%cmp%logic %P, %Q, %nasrc1, %nasrc2, %R", 
	0x020)

DEFINST(FFMA, 
	"%pred FFMA%ftzfmz%rnd%sat_01 %dst, %nsrc1_05, %nsrc2, %nsrc3", 
	0x030)

DEFINST(FCMP, 
	"%pred FCMP%cmp%ftz_ %dst, %src1, %src2, %src3", 
	0x038)

//DEFINST(FCCO, 
//	"%pred FCCO", 
//	0x040)

//DEFINST(FSWZ, 
//	"%pred FSWZ", 
//	0x048)

DEFINST(FADD, 
	"%pred FADD%ftz_%rnd%sat_10 %dst, %nasrc1, %nasrc2", 
	0x050)

DEFINST(FMUL, 
	"%pred FMUL%ftzfmz%rnd%sat_01 %dst, %nsrc1_18, %src2", 
	0x058)

DEFINST(RRO, 
	"%pred RRO %dst, %src1", 
	0x060)

//DEFINST(IPA, 
//	"%pred IPA", 
//	0x0c0)

DEFINST(MUFU, 
	"%pred MUFU%mufu_op%sat_01 %dst, %nasrc1", 
	0x0c8)

/* Double-Precision Floating Point category:
 * DMNMX, DSET, DSETP, DFMA, DADD, DMUL
 */

DEFINST(DMNMX,
	"%pred DMNMX %dst, %src1, %src2, %R",
	0x108)

//DEFINST(DSET,
//	"%pred DSET", 
//	0x110)

DEFINST(DSETP, 
	"%pred DSETP%cmp%logic %P, %Q, %nasrc1, %nasrc2, %R", 
	0x118)

DEFINST(DFMA, 
	"%pred DFMA %dst, %src1, %nsrc2, %nsrc3", 
	0x120)

DEFINST(DADD, 
	"%pred DADD%rnd %dst, %nasrc1, %nasrc2", 
	0x148)

DEFINST(DMUL, 
	"%pred DMUL%rnd %dst, %src1, %nsrc2", 
	0x150)

/* Immediate category:
 * IMAD32I, IADD32I, IMUL32I, MOV32I, FFMA32I, FADD32I, FMUL32I, LOP32I, ISCADD32I
 */

//DEFINST(IMAD32I, 
//	"%pred IMAD32I", 
//	0x200)

DEFINST(IADD32I, 
	"%pred IADD32I%sat%x %dst, %src1, %imm32", 
	0x208)

//DEFINST(IMUL32I, 
//	"%pred IMUL32I", 
//	0x210)

DEFINST(MOV32I, 
	"%pred MOV32I %dst, %imm32", 
	0x218)

//DEFINST(FFMA32I, 
//	"%pred FFMA32I", 
//	0x220)

DEFINST(FADD32I, 
	"%pred FADD32I%ftz %dst, %nsrc1, %imm32", 
	0x228)

DEFINST(FMUL32I, 
	"%pred FMUL32I%ftzfmz%sat %dst, %src1, %imm32", 
	0x230)

DEFINST(LOP32I, 
	"%pred LOP32I%lop_op %dst, %src1, %imm32", 
	0x238)

//DEFINST(ISCADD32I, 
//	"%pred ISCADD32I", 
//	0x240)

/* Integer category:
 * IMNMX, ISET, ISETP, IMAD, BFI, ICMP, ISAD, ISCADD, ISUB, IMUL, SHR, SHL, LOP, BFE, FLO
 */

DEFINST(IMNMX, 
	"%pred IMNMX %dst, %src1, %src2, %R", 
	0x308)

//DEFINST(ISET,
//	"%pred ISET", 
//	0x310)

DEFINST(ISETP, 
	"%pred ISETP%cmp%u32%logic%s_ %P, %Q, %src1, %src2, %R", 
	0x318)

DEFINST(IMAD, 
	"%pred IMAD%type1%type2%hi%sat_17 %dst%cc, %src1, %src2, %src3", 
	0x320)

DEFINST(BFI, 
	"%pred BFI %dst, %src1, %src2, %src3", 
	0x328)

DEFINST(ICMP, 
	"%pred ICMP%cmp%u32 %dst, %src1, %src2, %src3", 
	0x330)

//DEFINST(ISAD, 
//	"%pred ISAD", 
//	0x338)

DEFINST(ISCADD, 
	"%pred ISCADD%s_ %dst%cc, %src1, %src2, %shamt", 
	0x340)

DEFINST(IADD, 
	"%pred IADD%sat_01%x %dst, %src1, %src2", 
	0x348)

DEFINST(IMUL, 
	"%pred IMUL%type1%type2%hi %dst, %src1, %src2", 
	0x350)

DEFINST(SHR, 
	"%pred SHR%u32%w %dst%cc, %src1, %src2", 
	0x358)

DEFINST(SHL, 
	"%pred SHL%s32%w %dst%cc, %src1, %src2", 
	0x360)

DEFINST(LOP, 
	"%pred LOP%lop_op %dst, %src1, %src2", 
	0x368)

DEFINST(BFE, 
	"%pred BFE%u32%brev %dst, %src1, %src2", 
	0x370)

DEFINST(FLO,
	"FLO %dst, %src2",
	0x378)

/* Other category: 
 * CSET, CSETP, PSET, PSETP, F2F, F2I, I2F, I2I, SEL, PRMT, MOV, S2R, P2R, R2P, B2R, NOP, LEPC, STP, POPC, VADD4, VMNMX4, VABSDIFF4, VSET4, VSHR4, VSHL4, VSEL4, VADD2, VMNMX2, VABSDIFF2, VSET2, VSHR2, VSHL2, VSEL2, VADD, VMNMX, VABSDIFF, VSET, VSHR, VSHL, VMAD, VSETP
 */

//DEFINST(CSET, 
//	"%pred CSET", 
//	0x400)

//DEFINST(CSETP, 
//	"%pred CSETP", 
//	0x404)

//DEFINST(PSET, 
//	"%pred CSET", 
//	0x408)

DEFINST(PSETP, 
	"%pred CSETP", 
	0x40c)

DEFINST(F2F, 
	"%pred F2F%ftz%dtype_f%stype_f%rop%sat %dst, %nasrc2", 
	0x410)

DEFINST(F2I, 
	"%pred F2I%ftz%dtype_i%stype_f%rnd_f %dst, %src2", 
	0x414)

DEFINST(I2F, 
	"%pred I2F%dtype_f%stype_i%rnd_i %dst, %src2", 
	0x418)

DEFINST(I2I, 
	"%pred I2I%stype_i%stype_i%sat %dst%cc__, %nasrc2%b_", 
	0x41c)

DEFINST(SEL, 
	"%pred SEL %dst, %src1, %src2, %R", 
	0x420)

//DEFINST(PRMT, 
//	"%pred PRMT", 
//	0x424)

DEFINST(MOV, 
	"%pred MOV%s_ %dst, %src2", 
	0x428)

DEFINST(S2R, 
	"%pred S2R %dst, %sreg", 
	0x42c)

//DEFINST(P2R, 
//	"%pred P2R", 
//	0x430)

//DEFINST(R2P, 
//	"%pred R2P", 
//	0x434)

DEFINST(B2R, 
	"%pred B2R%b2r_op%s_ %dst, %src1", 
	0x438)

DEFINST(NOP, 
	"%pred NOP%trig%nop_op%s_ CC%cc_op", 
	0x440)

DEFINST(LEPC, 
	"%pred LEPC %dst", 
	0x444)

DEFINST(VOTE, 
	"%pred VOTE%vote_op %dst, %P_75, %Q_s", 
	0x448)

//DEFINST(STP, 
//	"%pred STP", 
//	0x44c)

DEFINST(BAR, 
	"%pred BAR%bar_mode%bar_op %dst, %P_64, %dst, %src1, %src2, %Q_m",
	0x450)

//DEFINST(POPC, 
//	"%pred POPC", 
//	0x454)

//DEFINST(VADD4, 
//	"%pred VADD4", 
//	0x480)

//DEFINST(VMNMX4, 
//	"%pred VMNMX4", 
//	0x484)

//DEFINST(VABSDIFF4, 
//	"%pred VABSDIFF4", 
//	0x488)

//DEFINST(VSET4, 
//	"%pred VSET4", 
//	0x48c)

//DEFINST(VSHR4, 
//	"%pred VSHR4", 
//	0x490)

//DEFINST(VSHL4, 
//	"%pred VSHL4", 
//	0x494)

//DEFINST(VSEL4, 
//	"%pred VSEL4", 
//	0x498)

//DEFINST(VADD2, 
//	"%pred VADD2", 
//	0x4a0)

//DEFINST(VMNMX2, 
//	"%pred VMNMX2", 
//	0x4a4)

//DEFINST(VABSDIFF2, 
//	"%pred VABSDIFF2", 
//	0x4a8)

//DEFINST(VSET2, 
//	"%pred VSET2", 
//	0x4ac)

//DEFINST(VSHR2, 
//	"%pred VSHR2", 
//	0x4b0)

//DEFINST(VSHL2, 
//	"%pred VSHL2", 
//	0x4b4)

//DEFINST(VSEL2, 
//	"%pred VSEL2", 
//	0x4b8)

//DEFINST(VADD, 
//	"%pred VADD", 
//	0x4c0)

//DEFINST(VMNMX, 
//	"%pred VMNMX", 
//	0x4c8)

//DEFINST(VABSDIFF, 
//	"%pred VABSDIFF", 
//	0x4d0)

//DEFINST(VSET, 
//	"%pred VSET", 
//	0x4d8)

//DEFINST(VSHR, 
//	"%pred VSHR", 
//	0x4e0)

//DEFINST(VSHL, 
//	"%pred VSHL", 
//	0x4e8)

//DEFINST(VMAD, 
//	"%pred VMAD", 
//	0x4f0)

//DEFINST(VSETP, 
//	"%pred VSETP", 
//	0x4f8)

/* Load/Store From/To Read/Write Memory category: 
 * RED, ATOM, LD, LDU, ST, CCTL, LDLK, LDS_LDU, LD_LDU, LDL, LDS, LDSLK, STL, STS, STSUL, CCTLL, SULD, SURED, SUST, MEMBAR, SUQ, STUL, SULEA
 */

DEFINST(RED, 
	"%pred RED%e%red_op%red_type [%src1%off16], %dst", 
	0x500)

DEFINST(ATOM, 
	"%pred ATOM%e%atom_op%atom_type %src3, [%src1%off20], %dst%src4", 
	0x540)

DEFINST(LD, 
	"%pred LD%e%ld_cop%type %dst, [%src1%off16]", 
	0x580)
	
DEFINST(LDU, 
	"%pred LDU%e%type %dst, [%src1%off16]", 
	0x588)

DEFINST(ST, 
	"%pred ST%e%st_cop%type [%src1%off16], %dst", 
	0x590)
	
DEFINST(CCTL, 
	"%pred CCTL%e%cctl_op%cc_cop %dst, [%src1%off30]", 
	0x598)

DEFINST(LDLK, 
	"%pred LDLK%type %Q, %dst, [%src1%off16]", 
	0x5a0)

//DEFINST(LDS_LDU, 
//	"%pred LDS_LDU", 
//	0x5a8)

//DEFINST(LD_LDU, 
//	"%pred LD_LDU", 
//	0x5b0)

DEFINST(LDX, 
	"%pred LD%X%ldx_cop%type %dst, [%src1%off16]", 
	0x5c0)

DEFINST(LDSLK, 
	"%pred LDSLK%ldx_cop%type %dst, [%src1%off16]", 
	0x5c4)

DEFINST(STX,
	"%pred ST%X%stx_cop%type [%src1%off16], %dst",
	0x5c8)

DEFINST(STSUL, 
	"%pred STSUL%stx_cop%type [%src1%off16], %dst", 
	0x5cc)

DEFINST(CCTLL, 
	"%pred CCTLL%cc_cop %dst, [%src1%off24]", 
	0x5d0)

//DEFINST(SULD, 
//	"%pred SULD", 
//	0x5d4)

//DEFINST(SURED, 
//	"%pred SURED", 
//	0x5d8)

//DEFINST(SUST, 
//	"%pred SUST", 
//	0x5dc)

DEFINST(MEMBAR, 
	"%pred MEMBAR %lvl", 
	0x5e0)

//DEFINST(SUQ, 
//	"%pred SUQ", 
//	0x5e4)

DEFINST(STUL, 
	"%pred STUL%type [%src1%off16], %dst", 
	0x5e8)

//DEFINST(SULEA, 
//	"%pred SULEA", 
//	0x5f0)

/* Load From Read-Only Memory category:
 * VILD, ALD, AST, PIXLD, LDC, OUT, TEX, TLD, TLD4, TMML, TXQ, TXA, TXD
 */

//DEFINST(VILD, 
//	"%pred VILD", 
//	0x600)

//DEFINST(ALD, 
//	"%pred ALD", 
//	0x604)

//DEFINST(AST, 
//	"%pred AST", 
//	0x608)

//DEFINST(PIXLD, 
//	"%pred PIXLD", 
//	0x610)

DEFINST(LDC, 
	"%pred LDC%type %dst, c[%bank][%src1%off16]", 
	0x614)
	
//DEFINST(OUT, 
//	"%pred OUT", 
//	0x61c)

DEFINST(TEX, 
	"%pred TEX %dst, %src1, %src2, %geom", 
	0x680)

//DEFINST(TLD, 
//	"%pred TLD", 
//	0x690)

//DEFINST(TLD4, 
//	"%pred TDL4", 
//	0x6a0)

//DEFINST(TMML, 
//	"%pred TMML", 
//	0x6b0)

//DEFINST(TXQ, 
//	"%pred TXQ", 
//	0x6c0)

//DEFINST(TXA, 
//	"%pred TXA", 
//	0x6d0)

//DEFINST(TXD, 
//	"%pred TXD", 
//	0x6e0)

/* Control category: 
 * JMP, JMX, JCAL, BRA, BRX, CAL, PLONGJMP, SSY, PBK, PCNT, PRET, EXIT, LONGJMP, RET, KIL, RTT, BRK, CONT, SAM, RAM, BPT
 */

DEFINST(JMP, 
	"%pred JMP%u%lmt %target", 
	0x700)

//DEFINST(JMX, 
//	"%pred JMX", 
//	0x708)

DEFINST(JCAL, 
	"JCAL%noinc %target", 
	0x710)
	
DEFINST(BRA, 
	"%pred BRA%u%lmt %offset", 
	0x740)

//DEFINST(BRX, 
//	"%pred BRX", 
//	0x748)

DEFINST(CAL, 
	"CAL%noinc %offset", 
	0x750)

DEFINST(PLONGJMP, 
	"PLONGJMP %target", 
	0x758)

DEFINST(SSY, 
	"SSY %target", 
	0x760)

DEFINST(PBK, 
	"PBK %target", 
	0x768)

DEFINST(PCNT,
	"PCNT %target",
	0x770)

DEFINST(PRET, 
	"PRET%noinc %target", 
	0x778)

DEFINST(EXIT, 
	"%pred EXIT", 
	0x780)

DEFINST(LONGJMP, 
	"%pred LONGJMP", 
	0x788)

DEFINST(RET, 
	"%pred RET", 
	0x790)

//DEFINST(KIL, 
//	"%pred KIL", 
//	0x798)

//DEFINST(RTT, 
//	"RTT", 
//	0x7a0)

DEFINST(BRK, 
	"%pred BRK", 
	0x7a8)

DEFINST(CONT,
	"%pred CONT",
	0x7b0)

//DEFINST(SAM,
//	"SAM",
//	0x7c0)

//DEFINST(RAM,
//	"RAM",
//	0x7c8)

DEFINST(BPT,
	"BPT %target",
	0x7d0)

