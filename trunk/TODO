Multi2Sim
	-Remove '-decode_kind shared', because dispatch slots are not calculated properly with this option set to shared.

m2s-pipeline:
	-File $HOME/.m2src -> save configuration about m2s-pipeline, such as 'show macroinstructions' or current cycle.
	-Key <0..9>s -> go to sequence number.
	-Multithread/Multicore support.




********************************************************************************
Reported - pending 01/01/10
********************************************************************************

-Non-blocking caches and cache ports:

(2) As for non-blocking caches, I can't find any code on MSHRs(miss
status handling registers, or miss bufferes) for accommodating
concurrent in-flight misses. I cite  the following simple definition
from http://www.cs.washington.edu/research/arch/latency-nb-pre.html
for your quick reference, which is not equivalent to multi-port caches
as you pointed out:

"A non-blocking cache allows execution to proceed concurrently with
cache misses as long as dependency constraints are observed, thus
exploiting post-miss operations."



********************************************************************************
BUG 10/10/11
********************************************************************************

In the detailed timing model, the memory address for a load/store uops is obtained from the timing model by the context's last memory access address. I refer to the following code segment of the fetch_inst function
Code: [Select]

/* Memory access uops */
if (uop->flags & FMEM) {
	uop->mem_vtladdr = ctx->mem->last_address;
	uop->mem_phaddr = mmu_translate(THREAD.ctx->mid, ctx->mem->last_address);
}


For macro instructions like movsb etc, which put multiple load/store uops in the fetch queue, the memory address for the load/store uops would be same, even when they are actually different.  Won't this lead to wrong lru counters in the caches?

Moreover, in the speculative execution mode (when ctx->status has ctx_specmode bit set), the load/store uops would also have wrong address (as the macro instruction is not actually executed by the functional model, and the last memory access address would point to memory accessed by a previous instruction). This would also wrongly modify the lru counters in the caches. Can someone confirm this?


********************************************************************************
Bug 10/27/11 - Comments from M2S User
********************************************************************************
I was looking through the code and it seems like multi2sim frontend (cpukernel) does not go down the wrong path:

Code: [Select]

    /* Call the isa module to execute one machine instruction,
     * only if we are not in speculative mode. */
    if (!ctx_get_status(ctx, ctx_specmode))
        isa_execute_inst(buf);
 


Is my understanding correct?

I would like to model the wrong path (the actual effects of the wrong path memory instructions, for example). I am thinking it could be done by allowing the frontend to go down the wrong path until a) timing model tells the frontend to recover or b) the frontend encounters a syscall or an exception-generating instruction (non-implemented opcode or page fault, for example). The values overwritten by the stores would have to be buffered to enable recovery.

Does this look feasible, or am I missing something that makes this approach particularly hard?




********************************************************************************
Bug 11/04/11 - Comments from M2S User
********************************************************************************

If you debug like this:

if (hit && (uop->flags & FRET) && !uop->specmode) {
    bpred->ras_idx = (bpred->ras_idx + bpred_ras_size - 1) % bpred_ras_size;
    target = bpred->ras[bpred->ras_idx];
   printf( "target=%d for RAS\n", target);
}

the target is always zero.

As I asked at the end of my previous I think the RAS is not updated in the commit stage so the target is always zero




********************************************************************************
Bug 11/06/11 - Documentation MacPAT
********************************************************************************


Hi,
In the document it is stated:

Code: [Select]

rename_reads     c0t0     RAT.Reads
rename_writes    c0t0     RAT.Writes


The correct stats are RAT.IntReads and RAT.IntWrites

However for the following stats,
Code: [Select]

fp_rename_reads 
fp_rename_writes


 it is stated that they are not available in multi2sim, but I see:

RAT.FpReads and RAT.FpWrites

aren't they?





********************************************************************************
Bug 11/06/11 - Fix documentation
********************************************************************************

Hi,
In the document it is stated:

Code: [Select]
rename_reads     c0t0     RAT.Reads
rename_writes    c0t0     RAT.Writes
The correct stats are RAT.IntReads and RAT.IntWrites
However for the following stats,
Code: [Select]
fp_rename_reads 
fp_rename_writes

 it is stated that they are not available in multi2sim, but I see:
 RAT.FpReads and RAT.FpWrites
 aren't they?




********************************************************************************
Task 11/07/11 - Write disassemblers
********************************************************************************

Implement command-line option to disassemble x86 and Evergreen binaries:

m2s --cpu-disasm <file>
m2s --gpu-disasm <file>




********************************************************************************
Task 11/08/11 - SIGUSR1 signal
********************************************************************************

Include GPU simulation report when the simulator receives the SIGUSR1 signal.



********************************************************************************
Task 11/10/11 - Integrate GPU Visualization
********************************************************************************

- Figure out how to disable the compilation of a complete executable + libraries
  depending on whether a library is present in the system, to avoid errors
  when the user is not interested in this tool.



********************************************************************************
Task 11/10/11 - GPU Visualization - Pointers not freed
********************************************************************************

- Open main window. Open block diagram. Close main window without closing block
  diagram. This causes a lot of unfreed pointers.
