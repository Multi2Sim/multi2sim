/*
 *  Multi2Sim
 *  Copyright (C) 2012  Rafael Ubal (ubal@ece.neu.edu)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <arch/x86/emu/Emu.h>
#include <arch/x86/emu/Context.h>
#include <arch/x86/emu/Regs.h>
#include <arch/southern-islands/emu/Emu.h>
#include <lib/cpp/Misc.h>

#include "ABI.h"
#include "OpenCLDriver.h"

using namespace misc;

namespace Driver
{

static const char *OpenCLErrABICall =
	"\tAn invalid function code was generated by the your application as"
	"\tan argument of a system call reserved for the Multi2Sim OpenCL"
	"\tRuntime library. Please recompile your application and try again.";

// Free automatically only when m2s exit execution or called reset()
std::unique_ptr<OpenCLSIDriver> OpenCLSIDriver::instance;

OpenCLSIDriver::OpenCLSIDriver()
{
	// Obtain instance of emulators
	si_emu = SI::Emu::getInstance();
	si_emu->setDriverCL(this);
}

OpenCLSIDriver::~OpenCLSIDriver()
{
}

OpenCLSIDriver *OpenCLSIDriver::getInstance()
{
	// Instance already exists
	if (instance.get())
		return instance.get();

	// Create instance
	instance.reset(new OpenCLSIDriver());
	return instance.get();
}

void OpenCLSIDriver::RequestWork(SI::NDRange *ndrange)
{
	// FIXME
}

void OpenCLSIDriver::NDRangeComplete(SI::NDRange *ndrange)
{
	// FIXME
}

int OpenCLSIDriver::DriverCall(x86::Context *ctx, int abi_code)
{
	// Function abi_code
	if (abi_code <= OpenCLABIInvalid || abi_code >= OpenCLABICallCount)
		fatal("%s: invalid OpenCL ABI call (abi_code %d).\n%s",
			__FUNCTION__, abi_code, OpenCLErrABICall);

	// Debug
	x86::Emu::call_debug << misc::fmt("  %s (abi_code %d)\n", 
		OpenCLABICallName[abi_code].c_str(), abi_code);
	x86::Emu::opencl_debug << misc::fmt("OpenCL ABI call '%s' (abi_code %d)\n",
		OpenCLABICallName[abi_code].c_str(), abi_code);

	// Call OpenCL Runtime function
	assert(OpenCLABICallTable[abi_code]);
	int ret = OpenCLABICallTable[abi_code](ctx);

	// Return value
	return ret;
}

void OpenCLSIDriver::AddProgram(std::unique_ptr<SI::Program> program)
{
	programs.insert(this->programs.begin() + program.get()->getId(), 
		std::move(program));
}

void OpenCLSIDriver::AddKernel(std::unique_ptr<SI::Kernel> kernel)
{
	kernels.insert(this->kernels.begin() + kernel.get()->getId(), 
		std::move(kernel));
}

}  // namespace Driver
