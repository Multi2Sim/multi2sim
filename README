===============================================================================
Directions for new version release:

	* svn commit all previous changes

	* Update AM_INIT_AUTOMAKE in 'configure.in'

	* Remake all to update 'Makefiles'
		~/multi2sim/trunk$ make clean
		~/multi2sim/trunk$ make

	* Add line in Changelog:
		"Version X.Y.Z released"

	* Copy 'trunk' directory into 'tags'. For example:
		~/multi2sim$ svn cp trunk tags/multi2sim-X.Y.Z

	* svn commit

	* In trunk directory, create tar ball.
		~/multi2sim/trunk$ make distcheck

	* Copy tar ball to Multi2Sim server:
		scp multi2sim-X.Y.Z.tar.gz $(M2S-SERVER):public_html/files/

	* Update Multi2Sim web site.
		* Log in.
		* Click toolbox -> Special Pages -> Uncategorized templates
		* Update 'Latest Version' and 'Latest Version Date'

	* Send email to multi2sim@multi2sim.org


===============================================================================

GPU-REL: Implementation of fault insertion in active mask

Use command-line option '--gpu-stack-faults <file>'. The format of the text file is a sequence of lines, each with the following format:
   <cycle> <compute_unit_id> <stack_id> <active_mask_id> <bit>

<cycle>: cycle number. 1 is the first cycle. They must appear in order.
<compute_unit_id>: identifier of the compute unit. Must be in range [0..NumComputeUnits-1]
<stack_id>: identifier of the stack_id (or wavefront) within the compute unit. Must be in range [0..MaxWorkGroupSize/WavefrontSize-1]
<active_mask_id>: active mask index within the stack. Must be in range [0..31], because 32 is the number of entries in the stack. In the Multi2Sim implementation, the current active mask is the element at the top of the stack. Thus, a value of <active_mask_id> matching the top of the stack at a given time will affect the current active mask for a wavefront.
<bit>: index of the bit in the active mask to switch. Must be in range [0..WavefrontSize-1]


Example:

Contents of file 'faults':
7 5 3 4 2
17 6 2 6 6
18 0 0 0 0

Command-line:
m2s --gpu-sim detailed --gpu-stack-faults faults --debug-gpu-pipeline pipeline <opencl_program>


When a fault is inserted, it will be done at the end of the specified cycle. The pipeline debug information will dump a line notifying about the insertion of the fault, in the following format:

fault cu=<compute_unit_id> stack=<stack_id> am=<active_mask_id> bit=<bit> effect=<effect>

where <compute_unit_id>, <stack_id>, <active_mask_id>, and <bit> correspond exactly to the parameters entered in the faults input file, and <effect> is a string taking one of the following values:

"cu_idle": fault with no effect. The compute unit is not executing a work-group.
"wf_idle": fault with no effect. The compute unit is executing less wavefronts than supported, and this fault fell in an unused active mask stack.
"am_idle": fault with no effect. The active mask index is over the stack top.
"wi_idle": fault with no effect. The modified bit is unused in the active mask.
"error": fault caused an error, affecting a utilized active mask.


